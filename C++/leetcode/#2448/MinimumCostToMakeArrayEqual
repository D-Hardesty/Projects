class Solution {
public:
    long long minCost(vector<int>& nums, vector<int>& cost) {
        long long lowCost = numeric_limits<long long>::max();
        unordered_map<int, int> frequency;
        for (int num : nums) frequency[num]++;
        
        for (const auto& num : frequency) {
            long long curCost = 0;
            for (int i = 0; i < nums.size(); ++i) {
                curCost += abs(1ll * (nums[i] - num.first) * cost[i]);
            }
            lowCost = min(lowCost, curCost * num.second);
        }
        return lowCost;
    }
};
